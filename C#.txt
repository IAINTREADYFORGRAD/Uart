1. var

   (1) determined by the compiler at compile-time
       e.g., var number = 5;             the type of 'number' is inferred as int
             var text = "Hello";         the type of 'text' is inferred as string
             var list = new List<int>(); the type of 'list' is inferred as List<int>
             
   (2) Implicitly-typed variables must be initialized
       e.g., x var key
             o var key = 0

2. async
   
    (1) 將一個方法使用 async 進行修飾，這意味著你告訴 Compiler
        A. 我要在這個方法內進行一個非同步的任務
        B. 而且我需要在這個方法內等待某個非同步任務完成後，繼續進行之後的任務

    (2) 如果今天沒有 async 關鍵字，你就必須要自己把任務做成一個一個的 Callback，
        並且把這些任務放到Task裡，然後不停的寫 ContinueWith

    (3) https://blog.opasschang.com/understand-csharp-asyn/

3. await

    (1) async 裡面，一定要寫 await

    (2) 有了 await，Compiler 才知道非同步的斷點在哪裡，才有辦法幫你生成狀態機

4. unit

    (1) nanosecond: 1/1 000 000 000
    (2) microsecond: 1/1 000 000

5. thread vs task

    (1) thread
        
        A. 手動 create, start, wait, close, and the communication between threads

        B. no return value

    (2) task

        A. 

        B. has return value

        C. use thread from thread pool

        (3) https://blog.csdn.net/qq_42504097/article/details/132026576

6. thread vs thread pool

    (1) main process 必須等 threads 都結束後才會關閉

    (2) threadpool 當 main process 關閉後才結束

7. arrow function =>

    (1) 

8. CancellationToken

    (1) Cancel: Signals a cancellation request.

    (2) CancelAfter: Schedules a cancellation request after a specified delay

    (3) Dispose: Releases the resources used by the CancellationTokenSource

9. async

    (1) marks method as asynchronous

10. await

    (1) used inside an async method to pause its execution until the awaited task completes

    (2) returns the result of the awaited task or continues execution once the task is complete

    (3) await allows other tasks to run while waiting for the asynchronous operation to complete

11. static
    
    (1) has different meaning from being in c
    
    (2) c#
    
        A. a function w/ static modifier does not belong to an instance of the class.

        B. Static Classes: cannot be instantiated and can only contain static members

        C. Static Methods: belongs to the class itself rather than an instance

        D. Static Fields and Properties: shared across all instances of a class
            
            e.g., 
            
            public class Example
            {
                public static int Count; // Shared among all instances
            }

        E. Static Constructors: used to initialize static members of a class

            e.g.,

            public class Example
            {
                static Example() {
                    // Static constructor implementation
                }
            }

12. Instance Methods

    (1) Methods defined with public void (or any other access modifier and return type) are instance methods
            
        e.g., 

        public class Example
        {   
            public void InstanceMethod()
            {
            }
        }

    (2) This means that to call them, you need to create an instance of the class. 
        Instance methods operate on the instance data of the class.

        e.g., 

        Example example = new Example();
        example.InstanceMethod();

13. Static Methods

    (1) Methods defined with the static modifier do not belong to a specific instance of the class. 

        e.g., 

        public class Example
        {
            public static void StaticMethod()
            {
            }
        }

    (2) They belong to the class itself and can be called without creating an instance of the class.

        e.g.,

        Example.StaticMethod();
